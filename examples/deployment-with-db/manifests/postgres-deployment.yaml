apiVersion: apps/v1
kind: Deployment
metadata:
# a deployment label is optional, it can group multiple deployments together
# for example, kubectl can delete multiple deployments at once if they have the same label
  labels:
    app: postgres-db-deployment # optional, see above comment
  name: postgres-db-deployment # name of deployment
spec:
  replicas: 1 # how many pods to create and maintain
  selector:
    matchLabels:
      app: postgres-db-deployment # pods with this label will be managed by this deployment (see label in template below)
  template: # this template is for pods that the deployment will create
    metadata:
      labels:
        app: postgres-db-deployment # both the deployment and the service use this label to find their pods
    spec:
      containers:
      - image: postgres-db-deployment:1.0 # name of the image to run, the node the Pod runs on will need this image loaded or need to be able to docker pull it
        name: postgres-db-deployment # name of the container that docker creates. in most cases it doesn't matter too much what it is.
--- # you can put multiple manifests in one file if you separate them with "---"
apiVersion: v1
kind: Service # The Deployment makes Pods, but they need a Service to be accessible from outside the cluster
metadata:
  name: postgres-db-service
spec:
  type: ClusterIP # ClusterIP services are accessible to other Pods inside the cluster
  selector:
    app: postgres-db-deployment # this should match the label in the pod template above
  ports:
  - name: postgres # you only really need to name the ports if you have multiple on a service.
    port: 5432 # port the Service is accessible on
    targetPort: 5432 # port the Service will point to on the container, doesn't have to be the same as the port above